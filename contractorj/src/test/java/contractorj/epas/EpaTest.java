package contractorj.epas;

import org.junit.Assert;
import org.w3c.dom.Document;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import java.io.*;
import java.net.URI;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.*;

public class EpaTest {

    protected void deleteFolder(File folder) {
        File[] files = folder.listFiles();
        if(files!=null) { //some JVMs return null for empty dirs
            for(File f: files) {
                if(f.isDirectory()) {
                    deleteFolder(f);
                } else {
                    f.delete();
                }
            }
        }
        folder.delete();
    }


    protected Document loadXML(URI xml) throws Exception
    {
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        factory.setIgnoringComments(true);
        factory.setIgnoringElementContentWhitespace(true);

        DocumentBuilder builder = factory.newDocumentBuilder();

        return builder.parse(new File(xml));
    }

    protected Path out;
    protected File sootOutput;

    protected void testEpa(String className) throws Exception {
        out = Files.createTempDirectory("output_epas");
        sootOutput = new File(System.getProperty("user.dir") + "/sootOutput");

        final String fullClassName = "examples." + className;
        final String outputXML = out.toAbsolutePath() + "/" + fullClassName + ".xml";
        final String corral = Object.class.getResource("/corral/corral.exe").getFile();

        final List<String> args = new LinkedList<>();

        args.add("-c");
        args.add(fullClassName);
        args.add("-co");
        args.add(corral);
        args.add("-cp");

        // build folder is generated by gradle and out is generated by intellij
        // ../out/production/classes

        args.add("../examples/build/classes/main");
        //args.add("../out/production/classes");
        args.add("-d");
        args.add(out.toAbsolutePath() + "/" + fullClassName + ".dot");
        args.add("-x");
        args.add(outputXML);

        contractorj.Main.main(args.toArray(new String[args.size()]));

        final URI expectedEpaFile = Object.class.getResource("/" + fullClassName + ".xml").toURI();

        Document A = loadXML(expectedEpaFile);
        Document B = loadXML(new File(outputXML).toURI());

        Assert.assertTrue(A.isEqualNode(B));
    }

}
